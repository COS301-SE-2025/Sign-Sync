import asyncio
import httpx
import websockets
import time
import statistics
import json
import pytest

WS_URL = "ws://localhost:8006"
START = "/v1/session/start"
STOP = "/v1/session/stop"
STREAM = "/v1/stream"

CONCURRENT_USERS = 25
MESSAGES_PER_USER = 5

PAYLOAD = {"t":1758909143297,"pose33":[[0.42609840631484985,-0.004912757780402899,-0.6867566704750061,0.9997316598892212],[0.44643789529800415,-0.08055205643177032,-0.6576701402664185,0.9996747374534607],[0.4589216709136963,-0.07783398777246475,-0.6576026678085327,0.9997459650039673],[0.46938467025756836,-0.07459310442209244,-0.6574008464813232,0.9997018575668335],[0.40570443868637085,-0.08645620197057724,-0.6738294363021851,0.9996102452278137],[0.39080074429512024,-0.08700401335954666,-0.6736064553260803,0.9996249675750732],[0.37466514110565186,-0.08495579659938812,-0.6741501688957214,0.9995256662368774],[0.47752103209495544,-0.040331773459911346,-0.36149662733078003,0.9997615218162537],[0.3588383197784424,-0.04720425233244896,-0.4205881953239441,0.9996113181114197],[0.4425949454307556,0.05238982290029526,-0.5645775198936462,0.9994912147521973],[0.39755862951278687,0.053211361169815063,-0.5815228819847107,0.9993535280227661],[0.5845876932144165,0.27385687828063965,-0.06283597648143768,0.9984906315803528],[0.23377370834350586,0.27138301730155945,-0.3524695336818695,0.997016429901123],[0.6128532886505127,0.7685396671295166,-0.0763891413807869,0.8793979287147522],[0.24450668692588806,0.7555029988288879,-0.694465160369873,0.9731957316398621],[0.7332894206047058,0.6620439291000366,-0.6199539303779602,0.9823464155197144],[0.4667246341705322,0.5527251362800598,-1.2027952671051025,0.9851605296134949],[0.7829850316047668,0.6568870544433594,-0.7180821299552917,0.9755222797393799],[0.5408989787101746,0.5413480401039124,-1.310606598854065,0.9760727882385254],[0.7948507070541382,0.576932430267334,-0.7677615284919739,0.9770597815513611],[0.5540630221366882,0.45670074224472046,-1.2748600244522095,0.9761824607849121],[0.7623676061630249,0.5648240447044373,-0.6567331552505493,0.9757546186447144],[0.5299522280693054,0.4578884243965149,-1.1924935579299927,0.973639965057373],[0.5074064135551453,1.0235129594802856,0.058676887303590775,0.34432145953178406],[0.29438281059265137,1.026819109916687,-0.05555720999836922,0.34262993931770325],[0.5023332834243774,1.6549572944641113,0.1349707394838333,0.0027867616154253483],[0.2667110562324524,1.6812862157821655,0.03550897538661957,0.002155929571017623],[0.4886167049407959,2.229959011077881,0.6477289199829102,0.0002986659237649292],[0.2748723030090332,2.2504379749298096,0.4353618621826172,0.0000661315571051091],[0.4878568649291992,2.3133270740509033,0.6753159165382385,0.0003473293036222458],[0.2639664113521576,2.3269248008728027,0.4612274169921875,0.00009552314440952614],[0.48516297340393066,2.400376081466675,0.2606924772262573,0.00046085778740234673],[0.32328274846076965,2.4171509742736816,-0.034465543925762177,0.0002664223429746926]],"left21":[[0.7093127369880676,0.6606088876724243,-1.1823033219116041e-8],[0.7192368507385254,0.5753800272941589,-0.03176111727952957],[0.7483676671981812,0.5084938406944275,-0.052324481308460236],[0.780344545841217,0.4985663890838623,-0.0707828477025032],[0.8042669296264648,0.5305514931678772,-0.08758567273616791],[0.834710419178009,0.5363596677780151,-0.032095491886138916],[0.8880566954612732,0.5271207690238953,-0.0543241873383522],[0.9254277944564819,0.5226368308067322,-0.07006467878818512],[0.9554556012153625,0.5209822058677673,-0.08233895152807236],[0.8444160223007202,0.593721866607666,-0.030144281685352325],[0.8376569151878357,0.57826167345047,-0.06264331191778183],[0.8047598600387573,0.5745683312416077,-0.07107094675302505],[0.7861220240592957,0.5761933922767639,-0.07122861593961716],[0.8371806740760803,0.6440420746803284,-0.03188221901655197],[0.8215425610542297,0.6285455226898193,-0.05799579620361328],[0.795401394367218,0.6240921020507812,-0.05058352276682854],[0.783568263053894,0.6233446598052979,-0.040874481201171875],[0.8209325075149536,0.6867558360099792,-0.03749110922217369],[0.8030669093132019,0.6742368340492249,-0.05199316143989563],[0.7820507884025574,0.6632452011108398,-0.04555956646800041],[0.7723459005355835,0.6585202813148499,-0.03705199435353279]],"right21":[[0.46998903155326843,0.5690096616744995,2.6234326355734083e-7],[0.4961554706096649,0.522891104221344,-0.018771005794405937],[0.5475817322731018,0.4888536334037781,-0.031398992985486984],[0.5925849080085754,0.483106404542923,-0.0403999499976635],[0.6209620237350464,0.48120006918907166,-0.04796630144119263],[0.5484781861305237,0.4126070439815521,-0.03492136299610138],[0.6072005033493042,0.4065629243850708,-0.057513777166604996],[0.6506412029266357,0.41327545046806335,-0.07406682521104813],[0.6859632730484009,0.4191344380378723,-0.08502475917339325],[0.5513249635696411,0.4544824957847595,-0.03446054086089134],[0.594963014125824,0.4933909475803375,-0.06284960359334946],[0.5928138494491577,0.5111228227615356,-0.07366630434989929],[0.5883891582489014,0.5086077451705933,-0.0772254541516304],[0.5485913753509521,0.5066787600517273,-0.034556325525045395],[0.5854911208152771,0.5301381349563599,-0.06031417101621628],[0.5862880945205688,0.5298909544944763,-0.06126483157277107],[0.5838897824287415,0.5125060081481934,-0.05738353729248047],[0.5418394804000854,0.554571807384491,-0.03537874296307564],[0.5683047771453857,0.5654051899909973,-0.05069327354431152],[0.5651236176490784,0.566956639289856,-0.04689682275056839],[0.560202956199646,0.5583329200744629,-0.04096440598368645]]}

async def simulate_user(user_id: int):
    response_times = []
    errors = 0
    sent = 0
    async with httpx.AsyncClient() as client:
        try:
            start_resp = await client.post(f"{WS_URL + START}")
            start_resp.raise_for_status()
            session_id = start_resp.json().get("session_id")
            if not session_id:
                return (0, 1, [])
            
            ws_url = WS_URL + STREAM + "/" + session_id
            async with websockets.connect(ws_url) as ws:
                for i in range(MESSAGES_PER_USER):
                    sent += 1
                    start = time.perf_counter()
                    PAYLOAD["t"] = int(time.time() * 1000)
                    await ws.send(json.dumps(PAYLOAD))
                    reply = await ws.recv()
                    elapsed = (time.perf_counter() - start) * 1000
                    response_times.append(elapsed)
                
            stop_resp = await client.post(f"{WS_URL + STOP}", json={"session_id": session_id})
            stop_resp.raise_for_status()

        except Exception as e:
            errors += 1

    return (sent, errors, response_times)        

@pytest.mark.asyncio
async def test_websocket_load():
    tasks = [simulate_user(i) for i in range(CONCURRENT_USERS)]
    results = await asyncio.gather(*tasks)

    total_messages = sum(r[0] for r in results)
    total_errors = sum(r[1] for r in results)
    response_times = [t for r in results for t in r[2]]

    error_rate = (total_errors / total_messages) * 100 if total_messages else 0
    assert error_rate < 1, f"Error rate too high: {error_rate}%"

    if response_times:
        avg_response_time = statistics.mean(response_times)
        p95_response_time = statistics.quantiles(response_times, n=100)[94]
        p99_response_time = statistics.quantiles(response_times, n=100)[98]

        assert avg_response_time < 200, f"Average response time too high: {avg_response_time} ms"
        assert p95_response_time < 300, f"95th percentile response time too high: {p95_response_time} ms"
        assert p99_response_time < 400, f"99th percentile response time too high: {p99_response_time} ms"

    

